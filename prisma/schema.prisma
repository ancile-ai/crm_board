generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  accountId         String?
  providerAccountId String
  type              String
  provider          String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  emailVerified       DateTime?
  image               String?
  role                Role          @default(USER)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  activitiesClearedAt DateTime?
  accounts            Account[]
  comments            Comment[]
  opportunities       Opportunity[]
  sessions            Session[]
  activityLogs        ActivityLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pipeline {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stages      Stage[]
}

model Stage {
  id            String        @id @default(cuid())
  name          String
  color         String        @default("#6b7280")
  order         Int
  pipelineId    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  opportunities Opportunity[]
  pipeline      Pipeline      @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  @@unique([pipelineId, order])
}

model Opportunity {
  id                 String          @id @default(cuid())
  title              String
  agency             String
  contractVehicle    String
  solicitationNumber String?
  estimatedValueMin  Int?
  estimatedValueMax  Int?
  dueDate            DateTime?
  currentStageId     String
  naicsCodes         String[]
  setAsideType       SetAsideType?
  opportunityType    OpportunityType
  technicalFocus     String[]
  probability        Int             @default(0)
  priority           Priority        @default(MEDIUM)
  assignedToId       String?
  keyRequirements    String?
  teamingPartners    String[]
  nextActions        String?
  notes              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  companyId          String?
  opportunityUrl     String?
  samGovId           String?
  attachments        Attachment[]
  comments           Comment[]
  keyDates           KeyDate[]
  assignedTo         User?           @relation(fields: [assignedToId], references: [id])
  company            Company?        @relation("CompanyOpportunities", fields: [companyId], references: [id])
  currentStage       Stage           @relation(fields: [currentStageId], references: [id])
  stageHistory       StageHistory[]
  contacts           Contact[]       @relation("ContactOpportunities")

  @@index([dueDate])
  @@index([currentStageId])
  @@index([assignedToId])
}

model StageHistory {
  id            String      @id @default(cuid())
  opportunityId String
  fromStage     String?
  toStage       String
  movedAt       DateTime    @default(now())
  movedBy       String?
  notes         String?
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
}

model KeyDate {
  id            String      @id @default(cuid())
  opportunityId String
  label         String
  date          DateTime
  description   String?
  createdAt     DateTime    @default(now())
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
}

model Attachment {
  id            String      @id @default(cuid())
  opportunityId String
  filename      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  uploadedAt    DateTime    @default(now())
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
}

model Comment {
  id            String      @id @default(cuid())
  opportunityId String
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id            String       @id @default(cuid())
  type          ActivityType
  entityType    String       // 'opportunity' or 'comment'
  entityId      String
  entityData    Json         // Store title, content, agency etc.
  userId        String
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [userId], references: [id])
}

enum ActivityType {
  OPPORTUNITY_CREATED
  OPPORTUNITY_DELETED
  COMMENT_ADDED
  COMMENT_DELETED
}

model Company {
  id            String        @id @default(cuid())
  name          String        @unique
  industry      String?
  website       String?
  phone         String?
  email         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String        @default("USA")
  cageCode      String?
  duns          String?
  samRegistered Boolean       @default(false)
  smallBusiness Boolean       @default(false)
  womanOwned    Boolean       @default(false)
  veteranOwned  Boolean       @default(false)
  hubzone       Boolean       @default(false)
  eightA        Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contacts      Contact[]
  opportunities Opportunity[] @relation("CompanyOpportunities")
}

model Contact {
  id            String        @id @default(cuid())
  firstName     String
  lastName      String
  email         String?
  phone         String?
  mobile        String?
  title         String?
  companyId     String
  isPrimary     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  opportunities Opportunity[] @relation("ContactOpportunities")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum SetAsideType {
  SMALL_BUSINESS
  EIGHT_A
  HUBZONE
  WOSB
  VOSB
  SDVOSB
}

enum OpportunityType {
  RFP
  RFI
  RFQ
  SOURCES_SOUGHT
  BAA
  SBIR_STTR
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
