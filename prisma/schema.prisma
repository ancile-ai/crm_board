// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  accountId         String? @db.Text
  providerAccountId String
  type              String
  provider          String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  opportunities Opportunity[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  MANAGER  
  ADMIN
}

model Pipeline {
  id          String      @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean     @default(false)
  stages      Stage[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Stage {
  id            String        @id @default(cuid())
  name          String
  color         String        @default("#6b7280")
  order         Int
  pipelineId    String
  pipeline      Pipeline      @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  opportunities Opportunity[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([pipelineId, order])
}

model Opportunity {
  id                String           @id @default(cuid())
  title             String
  agency            String
  contractVehicle   String
  solicitationNumber String?
  estimatedValueMin Int?
  estimatedValueMax Int?
  dueDate           DateTime?
  samGovId          String?
  currentStageId    String
  currentStage      Stage            @relation(fields: [currentStageId], references: [id])
  companyId         String?
  company           Company?         @relation("CompanyOpportunities", fields: [companyId], references: [id])
  naicsCodes        String[]
  setAsideType      SetAsideType?
  opportunityType   OpportunityType
  technicalFocus    String[]
  probability       Int              @default(0)
  priority          Priority         @default(MEDIUM)
  assignedToId      String?
  assignedTo        User?            @relation(fields: [assignedToId], references: [id])
  opportunityUrl     String?
  keyRequirements   String?          @db.Text
  teamingPartners   String[]
  nextActions       String?          @db.Text
  notes             String?          @db.Text
  attachments       Attachment[]
  comments          Comment[]
  contacts          Contact[]        @relation("ContactOpportunities")
  stageHistory      StageHistory[]
  keyDates          KeyDate[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([dueDate])
  @@index([currentStageId])
  @@index([assignedToId])
}

model StageHistory {
  id            String      @id @default(cuid())
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  fromStage     String?
  toStage       String
  movedAt       DateTime    @default(now())
  movedBy       String?
  notes         String?
}

model KeyDate {
  id            String      @id @default(cuid())
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  label         String
  date          DateTime
  description   String?
  createdAt     DateTime    @default(now())
}

model Attachment {
  id            String      @id @default(cuid())
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  filename      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  uploadedAt    DateTime    @default(now())
}

model Comment {
  id            String      @id @default(cuid())
  opportunityId String
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum SetAsideType {
  SMALL_BUSINESS
  EIGHT_A
  HUBZONE
  WOSB
  VOSB
  SDVOSB
}

enum OpportunityType {
  RFP
  RFI
  RFQ
  SOURCES_SOUGHT
  BAA
  SBIR_STTR
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Company {
  id          String   @id @default(cuid())
  name        String
  industry    String?
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String   @default("USA")
  cageCode    String?
  duns        String?
  samRegistered Boolean @default(false)
  smallBusiness Boolean @default(false)
  womanOwned  Boolean  @default(false)
  veteranOwned Boolean @default(false)
  hubzone     Boolean  @default(false)
  eightA      Boolean  @default(false)

  contacts     Contact[]
  opportunities Opportunity[] @relation("CompanyOpportunities")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  mobile    String?
  title     String?
  companyId String
  isPrimary Boolean @default(false)

  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  opportunities Opportunity[] @relation("ContactOpportunities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
